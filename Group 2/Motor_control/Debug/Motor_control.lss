
Motor_control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000019e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001f2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000224  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a24  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000768  00000000  00000000  00000cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000041d  00000000  00000000  00001438  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00001858  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000401  00000000  00000000  000018cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001f8  00000000  00000000  00001ccd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001ec5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  58:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  5c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  60:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  64:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  68:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  6c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  70:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  74:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  78:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61
  88:	0e 94 6f 00 	call	0xde	; 0xde <main>
  8c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <Move_Forward>:
#define MOTOR4_PIN2 PB7 // Motor 4, Control Pin 2 (IN8)

// Function to move forward
void Move_Forward() {
	// Motor 1: IN1 = HIGH, IN2 = LOW
	PORTB |= (1 << MOTOR1_PIN1);
  94:	28 9a       	sbi	0x05, 0	; 5
	PORTB &= ~(1 << MOTOR1_PIN2);
  96:	29 98       	cbi	0x05, 1	; 5

	// Motor 2: IN3 = HIGH, IN4 = LOW
	PORTB |= (1 << MOTOR2_PIN1);
  98:	2a 9a       	sbi	0x05, 2	; 5
	PORTB &= ~(1 << MOTOR2_PIN2);
  9a:	2b 98       	cbi	0x05, 3	; 5

	// Motor 3: IN5 = HIGH, IN6 = LOW
	PORTB |= (1 << MOTOR3_PIN1);
  9c:	2c 9a       	sbi	0x05, 4	; 5
	PORTB &= ~(1 << MOTOR3_PIN2);
  9e:	2d 98       	cbi	0x05, 5	; 5

	// Motor 4: IN7 = HIGH, IN8 = LOW
	PORTB |= (1 << MOTOR4_PIN1);
  a0:	2e 9a       	sbi	0x05, 6	; 5
	PORTB &= ~(1 << MOTOR4_PIN2);
  a2:	2f 98       	cbi	0x05, 7	; 5
  a4:	08 95       	ret

000000a6 <Move_Backward>:
}

// Function to move backward
void Move_Backward() {
	// Motor 1: IN1 = LOW, IN2 = HIGH
	PORTB &= ~(1 << MOTOR1_PIN1);
  a6:	28 98       	cbi	0x05, 0	; 5
	PORTB |= (1 << MOTOR1_PIN2);
  a8:	29 9a       	sbi	0x05, 1	; 5

	// Motor 2: IN3 = LOW, IN4 = HIGH
	PORTB &= ~(1 << MOTOR2_PIN1);
  aa:	2a 98       	cbi	0x05, 2	; 5
	PORTB |= (1 << MOTOR2_PIN2);
  ac:	2b 9a       	sbi	0x05, 3	; 5

	// Motor 3: IN5 = LOW, IN6 = HIGH
	PORTB &= ~(1 << MOTOR3_PIN1);
  ae:	2c 98       	cbi	0x05, 4	; 5
	PORTB |= (1 << MOTOR3_PIN2);
  b0:	2d 9a       	sbi	0x05, 5	; 5

	// Motor 4: IN7 = LOW, IN8 = HIGH
	PORTB &= ~(1 << MOTOR4_PIN1);
  b2:	2e 98       	cbi	0x05, 6	; 5
	PORTB |= (1 << MOTOR4_PIN2);
  b4:	2f 9a       	sbi	0x05, 7	; 5
  b6:	08 95       	ret

000000b8 <Turn_Left>:
}

// Function to turn left
void Turn_Left() {

	PORTB |= (1 << MOTOR1_PIN1);
  b8:	28 9a       	sbi	0x05, 0	; 5
	PORTB &= ~(1 << MOTOR1_PIN2);
  ba:	29 98       	cbi	0x05, 1	; 5

	PORTB |= (1 << MOTOR3_PIN1);
  bc:	2c 9a       	sbi	0x05, 4	; 5
	PORTB &= ~(1 << MOTOR3_PIN2);
  be:	2d 98       	cbi	0x05, 5	; 5

	// Right motors (Motor 2 and Motor 4): Stop
	PORTB &= ~((1 << MOTOR2_PIN1) | (1 << MOTOR2_PIN2) | (1 << MOTOR4_PIN1) | (1 << MOTOR4_PIN2));
  c0:	85 b1       	in	r24, 0x05	; 5
  c2:	83 73       	andi	r24, 0x33	; 51
  c4:	85 b9       	out	0x05, r24	; 5
  c6:	08 95       	ret

000000c8 <Turn_Right>:
}

// Function to turn right
void Turn_Right() {
	// Right motors (Motor 2 and Motor 4): Move forward
	PORTB |= (1 << MOTOR2_PIN1);
  c8:	2a 9a       	sbi	0x05, 2	; 5
	PORTB &= ~(1 << MOTOR2_PIN2);
  ca:	2b 98       	cbi	0x05, 3	; 5

	PORTB |= (1 << MOTOR4_PIN1);
  cc:	2e 9a       	sbi	0x05, 6	; 5
	PORTB &= ~(1 << MOTOR4_PIN2);
  ce:	2f 98       	cbi	0x05, 7	; 5

	// Left motors (Motor 1 and Motor 3): Stop
	PORTB &= ~((1 << MOTOR1_PIN1) | (1 << MOTOR1_PIN2) | (1 << MOTOR3_PIN1) | (1 << MOTOR3_PIN2));
  d0:	85 b1       	in	r24, 0x05	; 5
  d2:	8c 7c       	andi	r24, 0xCC	; 204
  d4:	85 b9       	out	0x05, r24	; 5
  d6:	08 95       	ret

000000d8 <Stop>:
}

void Stop() {
	PORTB &= ~((1 << MOTOR1_PIN1) | (1 << MOTOR1_PIN2) | (1 << MOTOR2_PIN1) | (1 << MOTOR2_PIN2) | (1 << MOTOR3_PIN1) | (1 << MOTOR3_PIN2) | (1 << MOTOR4_PIN1) | (1 << MOTOR4_PIN2));
  d8:	85 b1       	in	r24, 0x05	; 5
  da:	15 b8       	out	0x05, r1	; 5
  dc:	08 95       	ret

000000de <main>:
}

int main(void) {
	// Set motor control pins as output
	DDRB |= (1 << MOTOR1_PIN1) | (1 << MOTOR1_PIN2) | (1 << MOTOR2_PIN1) | (1 << MOTOR2_PIN2) | (1 << MOTOR3_PIN1) | (1 << MOTOR3_PIN2) | (1 << MOTOR4_PIN1) | (1 << MOTOR4_PIN2);
  de:	84 b1       	in	r24, 0x04	; 4
  e0:	8f ef       	ldi	r24, 0xFF	; 255
  e2:	84 b9       	out	0x04, r24	; 4
	// Stop all motors initially
	Stop();
  e4:	0e 94 6c 00 	call	0xd8	; 0xd8 <Stop>

	while (1) {
		// Move forward for 2 seconds
		Move_Forward();
  e8:	0e 94 4a 00 	call	0x94	; 0x94 <Move_Forward>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ec:	2f ef       	ldi	r18, 0xFF	; 255
  ee:	81 e1       	ldi	r24, 0x11	; 17
  f0:	9a e7       	ldi	r25, 0x7A	; 122
  f2:	21 50       	subi	r18, 0x01	; 1
  f4:	80 40       	sbci	r24, 0x00	; 0
  f6:	90 40       	sbci	r25, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <main+0x14>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <main+0x1e>
  fc:	00 00       	nop
		_delay_ms(2000);

		// Stop for 1 second
		Stop();
  fe:	0e 94 6c 00 	call	0xd8	; 0xd8 <Stop>
 102:	2f ef       	ldi	r18, 0xFF	; 255
 104:	88 e0       	ldi	r24, 0x08	; 8
 106:	9d e3       	ldi	r25, 0x3D	; 61
 108:	21 50       	subi	r18, 0x01	; 1
 10a:	80 40       	sbci	r24, 0x00	; 0
 10c:	90 40       	sbci	r25, 0x00	; 0
 10e:	e1 f7       	brne	.-8      	; 0x108 <main+0x2a>
 110:	00 c0       	rjmp	.+0      	; 0x112 <main+0x34>
 112:	00 00       	nop
		_delay_ms(1000);

		// Move backward for 2 seconds
		Move_Backward();
 114:	0e 94 53 00 	call	0xa6	; 0xa6 <Move_Backward>
 118:	2f ef       	ldi	r18, 0xFF	; 255
 11a:	81 e1       	ldi	r24, 0x11	; 17
 11c:	9a e7       	ldi	r25, 0x7A	; 122
 11e:	21 50       	subi	r18, 0x01	; 1
 120:	80 40       	sbci	r24, 0x00	; 0
 122:	90 40       	sbci	r25, 0x00	; 0
 124:	e1 f7       	brne	.-8      	; 0x11e <main+0x40>
 126:	00 c0       	rjmp	.+0      	; 0x128 <main+0x4a>
 128:	00 00       	nop
		_delay_ms(2000);

		// Stop for 1 second
		Stop();
 12a:	0e 94 6c 00 	call	0xd8	; 0xd8 <Stop>
 12e:	2f ef       	ldi	r18, 0xFF	; 255
 130:	88 e0       	ldi	r24, 0x08	; 8
 132:	9d e3       	ldi	r25, 0x3D	; 61
 134:	21 50       	subi	r18, 0x01	; 1
 136:	80 40       	sbci	r24, 0x00	; 0
 138:	90 40       	sbci	r25, 0x00	; 0
 13a:	e1 f7       	brne	.-8      	; 0x134 <main+0x56>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <main+0x60>
 13e:	00 00       	nop
		_delay_ms(1000);

		// Turn left for 2 seconds
		Turn_Left();
 140:	0e 94 5c 00 	call	0xb8	; 0xb8 <Turn_Left>
 144:	2f ef       	ldi	r18, 0xFF	; 255
 146:	81 e1       	ldi	r24, 0x11	; 17
 148:	9a e7       	ldi	r25, 0x7A	; 122
 14a:	21 50       	subi	r18, 0x01	; 1
 14c:	80 40       	sbci	r24, 0x00	; 0
 14e:	90 40       	sbci	r25, 0x00	; 0
 150:	e1 f7       	brne	.-8      	; 0x14a <main+0x6c>
 152:	00 c0       	rjmp	.+0      	; 0x154 <main+0x76>
 154:	00 00       	nop
		_delay_ms(2000);

		// Stop for 1 second
		Stop();
 156:	0e 94 6c 00 	call	0xd8	; 0xd8 <Stop>
 15a:	2f ef       	ldi	r18, 0xFF	; 255
 15c:	88 e0       	ldi	r24, 0x08	; 8
 15e:	9d e3       	ldi	r25, 0x3D	; 61
 160:	21 50       	subi	r18, 0x01	; 1
 162:	80 40       	sbci	r24, 0x00	; 0
 164:	90 40       	sbci	r25, 0x00	; 0
 166:	e1 f7       	brne	.-8      	; 0x160 <main+0x82>
 168:	00 c0       	rjmp	.+0      	; 0x16a <main+0x8c>
 16a:	00 00       	nop
		_delay_ms(1000);

		// Turn right for 2 seconds
		Turn_Right();
 16c:	0e 94 64 00 	call	0xc8	; 0xc8 <Turn_Right>
 170:	2f ef       	ldi	r18, 0xFF	; 255
 172:	81 e1       	ldi	r24, 0x11	; 17
 174:	9a e7       	ldi	r25, 0x7A	; 122
 176:	21 50       	subi	r18, 0x01	; 1
 178:	80 40       	sbci	r24, 0x00	; 0
 17a:	90 40       	sbci	r25, 0x00	; 0
 17c:	e1 f7       	brne	.-8      	; 0x176 <main+0x98>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <main+0xa2>
 180:	00 00       	nop
		_delay_ms(2000);

		// Stop for 1 second
		Stop();
 182:	0e 94 6c 00 	call	0xd8	; 0xd8 <Stop>
 186:	2f ef       	ldi	r18, 0xFF	; 255
 188:	88 e0       	ldi	r24, 0x08	; 8
 18a:	9d e3       	ldi	r25, 0x3D	; 61
 18c:	21 50       	subi	r18, 0x01	; 1
 18e:	80 40       	sbci	r24, 0x00	; 0
 190:	90 40       	sbci	r25, 0x00	; 0
 192:	e1 f7       	brne	.-8      	; 0x18c <main+0xae>
 194:	00 c0       	rjmp	.+0      	; 0x196 <main+0xb8>
 196:	00 00       	nop
 198:	a7 cf       	rjmp	.-178    	; 0xe8 <main+0xa>

0000019a <_exit>:
 19a:	f8 94       	cli

0000019c <__stop_program>:
 19c:	ff cf       	rjmp	.-2      	; 0x19c <__stop_program>
