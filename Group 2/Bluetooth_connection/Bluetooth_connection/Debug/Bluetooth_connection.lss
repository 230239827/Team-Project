
Bluetooth_connection.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00000176  000001ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000176  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000230  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009ac  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007fd  00000000  00000000  00000c54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000318  00000000  00000000  00001451  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  0000176c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000425  00000000  00000000  000017d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000166  00000000  00000000  00001bf9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001d5f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  58:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  5c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  60:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  64:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  68:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  6c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  70:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  74:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  78:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e6 e7       	ldi	r30, 0x76	; 118
  90:	f1 e0       	ldi	r31, 0x01	; 1
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a6 31       	cpi	r26, 0x16	; 22
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>
  9e:	0e 94 82 00 	call	0x104	; 0x104 <main>
  a2:	0c 94 b9 00 	jmp	0x172	; 0x172 <_exit>

000000a6 <__bad_interrupt>:
  a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <UART_Init>:

#define Baud_Rate 9600UL
#define Baud_Register_Value ((F_CPU/(16*Baud_Rate)) - 1)

void UART_Init() {
	UBRR0 = Baud_Register_Value; // Set UART's baud to 9600 with F_CPU = 20MHz
  aa:	81 e8       	ldi	r24, 0x81	; 129
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f00c5>
  b2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f00c4>
	UCSR0B = 1 << TXEN0;//| 1<<RXEN0 ; // Enable transmitter and receiver
  b6:	88 e0       	ldi	r24, 0x08	; 8
  b8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f00c1>
  bc:	08 95       	ret

000000be <Transmit_Character>:
	//UCSR0C = 1 << UCSZ01 | 1 << UCSZ00; // 8-bit data, 1 stop bit, no parity
}

void Transmit_Character(char data) {
	while ((UCSR0A & (1 << UDRE0)) == 0); // Wait for the transmit buffer to be empty
  be:	e0 ec       	ldi	r30, 0xC0	; 192
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	90 81       	ld	r25, Z
  c4:	95 ff       	sbrs	r25, 5
  c6:	fd cf       	rjmp	.-6      	; 0xc2 <Transmit_Character+0x4>
	UDR0 = data; // Send the character
  c8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
  cc:	08 95       	ret

000000ce <Transmit_String>:
}

void Transmit_String(const char* String) {
  ce:	0f 93       	push	r16
  d0:	1f 93       	push	r17
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
	uint8_t String_Length = strlen(String); // Get the length of the string
  d6:	fc 01       	movw	r30, r24
  d8:	01 90       	ld	r0, Z+
  da:	00 20       	and	r0, r0
  dc:	e9 f7       	brne	.-6      	; 0xd8 <Transmit_String+0xa>
  de:	31 97       	sbiw	r30, 0x01	; 1
  e0:	de 2f       	mov	r29, r30
  e2:	d8 1b       	sub	r29, r24
	for (uint8_t Index = 0; Index < String_Length; Index++) { // Loop through the string
  e4:	51 f0       	breq	.+20     	; 0xfa <Transmit_String+0x2c>
  e6:	8c 01       	movw	r16, r24
  e8:	c0 e0       	ldi	r28, 0x00	; 0
		Transmit_Character(String[Index]); // Transmit each character
  ea:	f8 01       	movw	r30, r16
  ec:	81 91       	ld	r24, Z+
  ee:	8f 01       	movw	r16, r30
  f0:	0e 94 5f 00 	call	0xbe	; 0xbe <Transmit_Character>
	UDR0 = data; // Send the character
}

void Transmit_String(const char* String) {
	uint8_t String_Length = strlen(String); // Get the length of the string
	for (uint8_t Index = 0; Index < String_Length; Index++) { // Loop through the string
  f4:	cf 5f       	subi	r28, 0xFF	; 255
  f6:	dc 13       	cpse	r29, r28
  f8:	f8 cf       	rjmp	.-16     	; 0xea <Transmit_String+0x1c>
		Transmit_Character(String[Index]); // Transmit each character
	}
}
  fa:	df 91       	pop	r29
  fc:	cf 91       	pop	r28
  fe:	1f 91       	pop	r17
 100:	0f 91       	pop	r16
 102:	08 95       	ret

00000104 <main>:

int main(void) {
	UART_Init(); // Initialize UART
 104:	0e 94 55 00 	call	0xaa	; 0xaa <UART_Init>

		// Send commands to the RN41/RN42 module
		Transmit_String("$$$");
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	91 e0       	ldi	r25, 0x01	; 1
 10c:	0e 94 67 00 	call	0xce	; 0xce <Transmit_String>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 110:	2f ef       	ldi	r18, 0xFF	; 255
 112:	88 e0       	ldi	r24, 0x08	; 8
 114:	9d e3       	ldi	r25, 0x3D	; 61
 116:	21 50       	subi	r18, 0x01	; 1
 118:	80 40       	sbci	r24, 0x00	; 0
 11a:	90 40       	sbci	r25, 0x00	; 0
 11c:	e1 f7       	brne	.-8      	; 0x116 <main+0x12>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <main+0x1c>
 120:	00 00       	nop
		_delay_ms(1000); // Wait for the module to respond with "CMD"

		Transmit_String("SM,1\r\n"); // Set module as master
 122:	84 e0       	ldi	r24, 0x04	; 4
 124:	91 e0       	ldi	r25, 0x01	; 1
 126:	0e 94 67 00 	call	0xce	; 0xce <Transmit_String>
 12a:	2f ef       	ldi	r18, 0xFF	; 255
 12c:	88 e0       	ldi	r24, 0x08	; 8
 12e:	9d e3       	ldi	r25, 0x3D	; 61
 130:	21 50       	subi	r18, 0x01	; 1
 132:	80 40       	sbci	r24, 0x00	; 0
 134:	90 40       	sbci	r25, 0x00	; 0
 136:	e1 f7       	brne	.-8      	; 0x130 <main+0x2c>
 138:	00 c0       	rjmp	.+0      	; 0x13a <main+0x36>
 13a:	00 00       	nop
		_delay_ms(1000);

		Transmit_String("WR\r\n"); // Save settings
 13c:	8b e0       	ldi	r24, 0x0B	; 11
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	0e 94 67 00 	call	0xce	; 0xce <Transmit_String>
 144:	2f ef       	ldi	r18, 0xFF	; 255
 146:	88 e0       	ldi	r24, 0x08	; 8
 148:	9d e3       	ldi	r25, 0x3D	; 61
 14a:	21 50       	subi	r18, 0x01	; 1
 14c:	80 40       	sbci	r24, 0x00	; 0
 14e:	90 40       	sbci	r25, 0x00	; 0
 150:	e1 f7       	brne	.-8      	; 0x14a <main+0x46>
 152:	00 c0       	rjmp	.+0      	; 0x154 <main+0x50>
 154:	00 00       	nop
		_delay_ms(1000);

		Transmit_String("R,1\r\n"); // Reboot the module
 156:	80 e1       	ldi	r24, 0x10	; 16
 158:	91 e0       	ldi	r25, 0x01	; 1
 15a:	0e 94 67 00 	call	0xce	; 0xce <Transmit_String>
 15e:	2f ef       	ldi	r18, 0xFF	; 255
 160:	88 e0       	ldi	r24, 0x08	; 8
 162:	9d e3       	ldi	r25, 0x3D	; 61
 164:	21 50       	subi	r18, 0x01	; 1
 166:	80 40       	sbci	r24, 0x00	; 0
 168:	90 40       	sbci	r25, 0x00	; 0
 16a:	e1 f7       	brne	.-8      	; 0x164 <main+0x60>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <main+0x6a>
 16e:	00 00       	nop
 170:	ff cf       	rjmp	.-2      	; 0x170 <main+0x6c>

00000172 <_exit>:
 172:	f8 94       	cli

00000174 <__stop_program>:
 174:	ff cf       	rjmp	.-2      	; 0x174 <__stop_program>
